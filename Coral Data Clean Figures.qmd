---
title: "Coral Data Clean Figures"
format: html
---

# Packages

```{r}
library(tidyverse)
library(readxl)
library(dplyr)
```

# Load data sets

```{r}
final_table <- read_excel("C:/Users/brody/Desktop/Brody Thesis Project/Data Sets/Coral Table Final.xlsx")
Ex_Cag_Clean <- read_excel("C:/Users/brody/Desktop/Brody Thesis Project/Data Sets/Ex_Cag_Clean_ver1.xlsx")
all_data <- read_excel("C:/Users/brody/Desktop/Brody Thesis Project/Data Sets/Combined_Data_ver1.xlsx")


```


# Total Coral Area

```{r}
total_coral_area <- final_table |> 
  group_by(Year, Treatment) |> 
  summarise(total_size = sum(Size, na.rm = TRUE), .groups = "drop")


ggplot(total_coral_area, aes(Year, total_size, color = Treatment, shape = Treatment, group = Treatment)) +
  

  geom_line(size = 0.8) +
  geom_point(size = 2.5) +
  labs(title = "Total Coral Area by Year and Treatment (All Blocks)",
       x = "Year", y = "Total Coral Size (cm2)") +
  scale_x_continuous(breaks = sort(unique(total_coral_area$Year))) +
  scale_shape_manual(values = c(16, 17, 18, 15)) + 
  scale_color_manual(values = c(
    "1x1" = "coral4",
    "2x2" = "steelblue",
    "Con" = "darkolivegreen",
    "TopOnly" = "burlywood2"))+
  theme_light()

```


# Number of Corals per Year

```{r}
# 1) Only present corals
corals_present <- final_table %>%
  filter(`Coral Present (Yes or No)` == "Yes")

# 2) One row per unique coral *instance* within a Year
#    (handles repeated Coral ID numbers across blocks)
instances <- corals_present %>%
  distinct(Year, Treatment, Block, `Coral ID`)

# 3) True totals across blocks per Year × Treatment
corals_totals <- instances %>%
  count(Year, Treatment, name = "total_number")  # .groups drops automatically here

# 4) Ensure all Year × Treatment combos appear (e.g., include 2018 = 0)
all_combos <- expand_grid(
  Year = sort(unique(final_table$Year)),
  Treatment = sort(unique(final_table$Treatment))
)

corals_totals_full <- all_combos %>%
  left_join(corals_totals, by = c("Year", "Treatment")) %>%
  mutate(total_number = replace_na(total_number, 0L))

# 5) Plot (one line per treatment)
ggplot(corals_totals_full, aes(x = Year, y = total_number, color = Treatment, group = Treatment, shape = Treatment)) +
  geom_line(size = 0.8) +
  geom_point(size = 2.5) +
  labs(title = "Total Number of Unique Present Corals per Year by Treatment",
       x = "Year", y = "Total Number of Corals (Present)") +
  scale_x_continuous(breaks = sort(unique(corals_totals_full$Year))) +
  scale_shape_manual(values = c(16, 17, 18, 15)) + 
  scale_color_manual(values = c(
    "1x1" = "firebrick",
    "2x2" = "steelblue",
    "Con" = "forestgreen",
    "TopOnly" = "goldenrod"))+
  theme_light()

```


# Mean Coral Size per Block 

```{r}
# ----- 1. Per-block totals (replicates for error bars) -----
per_block <- final_table %>%
  group_by(Year, Treatment, Block) %>%
  summarise(
    total_size = sum(Size, na.rm = TRUE),
    total_number = n_distinct(`Coral ID`),  #IGNORE THIS
    .groups = "drop"
  )

# ----- 2. Summarize across blocks (mean ± SE/CI) -----
summ <- per_block %>%
  group_by(Year, Treatment) %>%
  summarise(
    mean_size   = mean(total_size),
    sd_size     = sd(total_size),
    mean_number = mean(total_number), #MEAN NUMBER IS WRONG
    sd_number   = sd(total_number),
    n           = dplyr::n(),
    se_size     = sd_size / sqrt(n),
    se_number   = sd_number / sqrt(n),
    .groups = "drop"
  )

# ----- 3a. Plot mean total SIZE ± SE -----
pos_jd <- position_jitterdodge(jitter.width = 0.08, jitter.height = 0, dodge.width = 0.6, seed = 123)

ggplot(summ, aes(x = Year, y = mean_size,
                 color = Treatment, fill = Treatment, shape = Treatment)) +
  geom_line()+
  geom_point(size = 3, position = pos_jd, color = "black") +
  geom_errorbar(aes(ymin = mean_size - se_size, ymax = mean_size + se_size),
                width = 0.25, linewidth = 0.6, position = pos_jd) +
  labs(title = "Mean Coral Size per Block (±SE)",
       x = "Year", y = "Mean Total Size per Block (cm²)") +
  scale_fill_manual(values = c(
    "1x1" = "#8C510A",
    "2x2" = "#D8B365",
    "Con" = "cornsilk3",
    "TopOnly" = "#80CDC1"
  )) +
  scale_color_manual(values = c(
  "1x1" = "#8C510A",
    "2x2" = "#D8B365",
    "Con" = "cornsilk3",
    "TopOnly" = "#80CDC1"))+
  scale_shape_manual (values = c(21, 22, 23, 24))+
  scale_x_continuous(breaks = sort(unique(summ$Year))) +
  scale_y_continuous(expand = expansion(mult = c(0.02, 0.08))) +
  theme_light() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    axis.title = element_text(size = 12),
    axis.text  = element_text(size = 11),
    panel.grid.minor = element_blank(),
    legend.position = "bottom",
    legend.title = element_blank())

```

# New Corals by Treatment 

```{r}

# 3) First year each unique coral (by Treatment+Block+ID) appears
first_appearance <- instances %>%
  group_by(Treatment, Block, `Coral ID`) %>%
  summarise(first_year = min(Year), .groups = "drop")

# 4) Count new corals per Year × Treatment (across blocks)
new_corals <- first_appearance %>%
  count(Year = first_year, Treatment, name = "new_count")

# 5) Complete grid so years with 0 still show (e.g., 2018 = 0)
all_combos <- expand_grid(
  Year = sort(unique(final_table$Year)),
  Treatment = sort(unique(final_table$Treatment))
)

new_corals_full <- all_combos %>%
  left_join(new_corals, by = c("Year", "Treatment")) %>%
  mutate(new_count = replace_na(new_count, 0L))

# 6) Plot
ggplot(new_corals_full, aes(x = Year, y = new_count, color = Treatment, group = Treatment)) +
  geom_line(size = 0.8) +
  geom_point(size = 2.5, aes(shape = Treatment)) +
  labs(title = "Number of New Corals per Year by Treatment",
       x = "Year", y = "New Corals") +
  scale_x_continuous(breaks = sort(unique(new_corals_full$Year))) +
  scale_shape_manual(values = c(16, 17, 18, 15)) + 
  scale_color_manual(values = c(
    "1x1" = "firebrick",
    "2x2" = "steelblue",
    "Con" = "forestgreen",
    "TopOnly" = "goldenrod"))+
  theme_light()
```

# Check if variables are numeric

```{r}
str(all_data)   # shows type of each column
sapply(all_data, class)

```


```{r}
# Select only numeric columns
plot_data <- all_data %>%
  select(where(is.numeric))

# Compute Spearman correlations vs total_size
cors <- sapply(plot_data[ , names(plot_data) != "total_size"],
               function(x) cor(plot_data$total_size, x, method = "spearman", use = "pairwise.complete.obs"))

cor_df <- data.frame(Variable = names(cors), Correlation = cors)

# Plot
ggplot(cor_df, aes(x = Variable, y = Correlation, fill = Correlation)) +
  geom_col() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  coord_flip() +
  theme_minimal() +
  labs(title = "Spearman Correlation with Total Size",
       x = "Variable", y = "Spearman rho")

```

# Summary Stats and Comparisons


```{r}
# ---- Identify columns ----
benthic_cols <- c("CCA_calcareous","Fleshy_MA","Lobo/Peys","Scleractinian","SPAT","TAS")
fish_cols <- names(all_data)[grepl("Grazerdetritivore|Scrapper", names(all_data))]
predictor_cols <- c("mean_recruits", benthic_cols, fish_cols)
predictor_cols <- intersect(predictor_cols, names(all_data))  # keep only those that exist

# Numeric columns (for summaries/corr matrices)
num_cols <- names(all_data)[sapply(all_data, is.numeric)]
num_cols <- unique(c("total_size", intersect(num_cols, predictor_cols)))

# ---- 0) Sanity check: do benthic covers sum to ~1? ----
benthic_present <- all(benthic_cols %in% names(all_data))
if (benthic_present) {
  benthic_check <- all_data %>%
    mutate(benthic_sum = rowSums(across(all_of(benthic_cols)), na.rm = TRUE)) %>%
    summarize(
      mean_sum = mean(benthic_sum, na.rm = TRUE),
      sd_sum   = sd(benthic_sum, na.rm = TRUE),
      n_off_by_0.05 = sum(abs(benthic_sum - 1) > 0.05, na.rm = TRUE)
    )
  print(benthic_check)
}

# ---- 1) Summary statistics for numeric variables ----
summary_stats <- all_data %>%
  summarize(
    across(
      all_of(num_cols),
      list(
        n    = ~sum(!is.na(.)),
        mean = ~mean(., na.rm = TRUE),
        sd   = ~sd(., na.rm = TRUE),
        min  = ~min(., na.rm = TRUE),
        max  = ~max(., na.rm = TRUE)
      ),
      .names = "{.col}_{.fn}"
    )
  ) %>%
  pivot_longer(everything(),
               names_to = c("variable", "stat"),
               names_sep = "_(?=[^_]+$)",
               values_to = "value") %>%
  pivot_wider(names_from = stat, values_from = value) %>%
  arrange(variable)

print(summary_stats)

# ---- 2) Scatterplots: total_size vs each predictor (faceted) ----
scatter_long <- all_data %>%
  select(total_size, all_of(predictor_cols)) %>%
  pivot_longer(-total_size, names_to = "predictor", values_to = "xval")

p_scatter <- ggplot(scatter_long, aes(x = xval, y = total_size)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~ predictor, scales = "free_x") +
  theme_bw() +
  labs(
    x = "Predictor value",
    y = "Total coral area (cm²)",
    title = "total_size vs. predictors (LM fit with 95% CI)"
  )
print(p_scatter)

```


# Make control the reference

```{r}
all_data$Treatment <- factor(all_data$Treatment, 
                             levels = c("Con", "1x1", "2x2", "TopOnly"))

levels(all_data$Treatment)

```

# Make the correlation table 


```{r}

# ---- 5) (Optional) Simple one-predictor linear models: total_size ~ predictor ----
# This is useful to see effect sizes and model summaries one by one.
lm_list <- lapply(predictor_cols, function(v) {
  fml <- as.formula(paste0("total_size ~ `", v, "`"))
  fit <- lm(fml, data = all_data)
  summ <- summary(fit)
  tibble(
    predictor = v,
    n = sum(complete.cases(all_data[, c("total_size", v)])),
    estimate = coef(summ)[2, "Estimate"],
    std_error = coef(summ)[2, "Std. Error"],
    t_value = coef(summ)[2, "t value"],
    p_value = coef(summ)[2, "Pr(>|t|)"],
    r_squared = summ$r.squared,
    adj_r_squared = summ$adj.r.squared
  )
}) %>% bind_rows() %>% arrange(p_value)

print(lm_list)
```



# Example Correlation Test with Year as a fixed value, eventually make block a replicate 

```{r}
m_fixed <- lm(total_size ~ mean_recruits + Fleshy_MA + Treatment + factor(Year), 
              data = all_data)

summary(m_fixed)
```





















































